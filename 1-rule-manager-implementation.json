{
  "className": "RuleManager",
  "purpose": "Load, validate, and provide access to rotation rules from schedule-rules.json",
  "dependencies": {
    "required": [
      "schedule-rules.json",
      "src/models/rotationCodes.ts"
    ],
    "interfaces": [
      "src/business/interfaces/RuleTypes.ts"
    ]
  },

  "implementation": {
    "constructionPhases": [
      {
        "phase": "Rule Loading",
        "steps": [
          "Load schedule-rules.json",
          "Parse and type-check structure",
          "Initialize internal rule mappings"
        ],
        "errorHandling": {
          "type": "RuleLoadingError",
          "conditions": [
            "File not found",
            "Invalid JSON structure",
            "Missing required sections"
          ]
        }
      },
      {
        "phase": "Rule Validation",
        "steps": [
          "Validate category definitions match rotationCodes.ts",
          "Verify all referenced categories exist",
          "Check rule completeness",
          "Validate numeric constraints"
        ],
        "errorHandling": {
          "type": "RuleValidationError",
          "conditions": [
            "Unknown category references",
            "Conflicting rules",
            "Invalid numeric values",
            "Missing required rules"
          ]
        }
      }
    ],

    "publicMethods": [
      {
        "name": "getInstance",
        "type": "static",
        "purpose": "Singleton access to rules",
        "returns": "RuleManager instance"
      },
      {
        "name": "getCategoryRules",
        "purpose": "Get rules for a specific category",
        "parameters": ["categoryCode: CategoryCode"],
        "returns": "CategoryRules"
      },
      {
        "name": "getPatternRules",
        "purpose": "Get valid patterns for position",
        "parameters": ["position: SetPosition"],
        "returns": "PatternRules"
      },
      {
        "name": "getConstraints",
        "purpose": "Get all constraints for validation",
        "returns": "ConstraintRules"
      }
    ],

    "privateMethods": [
      {
        "name": "validateRules",
        "purpose": "Internal rule validation",
        "returns": "void",
        "throws": "RuleValidationError"
      },
      {
        "name": "checkConsistency",
        "purpose": "Verify rules don't conflict",
        "returns": "boolean"
      }
    ]
  },

  "testPlan": {
    "unitTests": [
      {
        "group": "Initialization",
        "tests": [
          "should load rules successfully",
          "should throw on missing rules file",
          "should throw on invalid JSON",
          "should validate category consistency"
        ]
      },
      {
        "group": "Rule Access",
        "tests": [
          "should return correct category rules",
          "should return pattern rules for position",
          "should validate constraint access"
        ]
      },
      {
        "group": "Error Cases",
        "tests": [
          "should detect conflicting rules",
          "should handle missing required rules",
          "should validate numeric constraints"
        ]
      }
    ],
    "integrationTests": [
      "should work with ValidationManager",
      "should support PatternManager queries"
    ]
  },

  "errorHandling": {
    "strategy": "Fail-fast on critical errors, collect non-critical for reporting",
    "errorTypes": {
      "RuleLoadingError": {
        "severity": "critical",
        "recovery": "none"
      },
      "RuleValidationError": {
        "severity": "critical",
        "recovery": "none"
      },
      "RuleConsistencyError": {
        "severity": "warning",
        "recovery": "report"
      }
    }
  },

  "logging": {
    "levels": {
      "ERROR": [
        "Rule loading failures",
        "Validation failures",
        "Critical consistency errors"
      ],
      "WARN": [
        "Non-critical rule conflicts",
        "Unusual rule combinations"
      ],
      "INFO": [
        "Rule loading success",
        "Rule access patterns"
      ],
      "DEBUG": [
        "Detailed validation steps",
        "Rule resolution paths"
      ]
    }
  },

  "acceptanceCriteria": [
    {
      "scenario": "Rule Loading",
      "given": "A valid schedule-rules.json file",
      "when": "RuleManager is initialized",
      "then": "Rules are loaded and validated successfully"
    },
    {
      "scenario": "Category Validation",
      "given": "Loaded rules",
      "when": "Accessing category rules",
      "then": "Only valid categories from rotationCodes.ts are allowed"
    },
    {
      "scenario": "Pattern Access",
      "given": "Loaded rules",
      "when": "Requesting patterns for a position",
      "then": "Returns only valid patterns for that position"
    },
    {
      "scenario": "Error Handling",
      "given": "Invalid or conflicting rules",
      "when": "Loading or validating rules",
      "then": "Appropriate errors are thrown with clear messages"
    }
  ]
}
