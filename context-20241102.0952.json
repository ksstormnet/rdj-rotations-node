{
  "projectStatus": {
    "phase": "Business Rules/Domain Layer Implementation",
    "currentFocus": "Core business rules for radio rotation patterns and validation",
    "completedSetup": [
      "Database models and schema",
      "Basic repository layer",
      "Database service layer",
      "CommercialPattern implementation and tests"
    ]
  },
  "existingStructure": {
    "models": {
      "category.ts": "Defines valid categories and Category class",
      "subcategory.ts": "Defines Subcategory class with code extraction",
      "rotation.ts": "Referenced but not shown",
      "rotationList.ts": "Referenced but not shown",
      "commercialPattern.ts": "Defines CommercialPattern class with break pattern validation"
    },
    "services": {
      "databaseService.ts": "Handles database connections and Prisma client",
      "rotationDisplayService.ts": "Displays rotation information"
    },
    "repositories": {
      "rotationRepository.ts": "Handles rotation data access"
    },
    "tests": {
      "unit": {
        "models": {
          "commercialPattern.test.ts": "Tests for CommercialPattern class"
        }
      }
    }
  },
  "newlyCreatedFiles": {
    "models": [
      "src/models/pattern.ts",
      "src/models/rotationTemplate.ts"
    ],
    "services": [
      "src/services/patternSelector.ts",
      "src/services/rotationBuilder.ts",
      "src/services/rotationValidator.ts"
    ],
    "tests": [
      "tests/unit/models/pattern.test.ts",
      "tests/unit/models/rotationTemplate.test.ts",
      "tests/unit/services/patternSelector.test.ts",
      "tests/unit/services/rotationBuilder.test.ts",
      "tests/unit/services/rotationValidator.test.ts"
    ]
  },
  "plannedImplementation": {
    "models": {
      "pattern.ts": {
        "enums": ["MusicSetPattern"],
        "interfaces": ["PatternSlot"],
        "purpose": "Define music set patterns and slot constraints"
      },
      "rotationTemplate.ts": {
        "interfaces": ["RotationHourTemplate"],
        "purpose": "Define structure of a complete rotation hour"
      }
    },
    "businessRules": {
      "commercialPatterns": {
        "validPatterns": ["631", "633", "613", "63", "61", "331"],
        "spotDurations": {
          "6": "60 seconds",
          "3": "30 seconds",
          "1": "15 seconds"
        },
        "constraints": {
          "maxDuration": 120,
          "minDuration": 75,
          "requirements": [
            "Breaks must differ in length",
            "At least one 15-second spot in second or third position per hour"
          ]
        }
      },
      "rotationStructure": {
        "required": [
          "Opening track (CE, CM, CL, or M)",
          "TOH Promo",
          "Station ID",
          "3 music sets",
          "2 commercial breaks"
        ]
      }
    },
    "development": {
      "approach": "TDD",
      "nextStep": "Implement pattern.test.ts",
      "sequence": [
        "Pattern definitions and constraints",
        "Full rotation template",
        "Pattern selection logic",
        "Rotation building logic",
        "Validation rules"
      ]
    }
  },
  "completedImplementation": {
    "commercialPattern": {
      "features": [
        "Pattern validation",
        "Duration calculation",
        "15-second spot placement validation",
        "Break compatibility checking",
        "Pattern combination validation"
      ],
      "validations": [
        "Pattern length",
        "Pattern code validity",
        "Spot duration validity",
        "Total duration constraints",
        "Break compatibility rules"
      ]
    }
  }
}
