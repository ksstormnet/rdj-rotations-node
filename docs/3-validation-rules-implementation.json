{
  "className": "ValidationManager",
  "purpose": "Enforce all rotation validation rules and provide detailed violation reporting",
  "dependencies": {
    "required": [
      "RuleManager",
      "PatternManager",
      "src/models/rotationCodes.ts"
    ]
  },

  "implementation": {
    "validationCategories": [
      {
        "name": "CategoryFrequency",
        "rules": [
          {
            "type": "exactCount",
            "applies": ["CE", "CM", "CL"],
            "requirement": 2
          },
          {
            "type": "minMaxCount",
            "applies": ["G", "M"],
            "min": 1,
            "max": 2,
            "constraint": "notBothMax"
          },
          {
            "type": "specialtyCount",
            "options": [
              {"SCo": 2},
              {"SCo": 1, "SCh": 1}
            ]
          }
        ]
      },
      {
        "name": "CategoryPlacement",
        "rules": [
          {
            "type": "noConsecutive",
            "applies": "DATE_BASED"
          },
          {
            "type": "requireSeparator",
            "applies": "DATE_BASED"
          },
          {
            "type": "postJingle",
            "restriction": "DATE_BASED"
          },
          {
            "type": "specialPosition",
            "position": "hourStart",
            "allowed": ["CE", "CM", "CL", "M"]
          }
        ]
      },
      {
        "name": "PatternCompliance",
        "rules": [
          {
            "type": "setPattern",
            "position": "thirdSet",
            "constraints": {
              "position5": ["SP", "SR", "SD", "SCo"],
              "position6": ["PB"]
            }
          },
          {
            "type": "commercialBreak",
            "constraints": {
              "differentLengths": true,
              "has15Second": true,
              "position": ["second", "third"]
            }
          }
        ]
      }
    ],

    "publicMethods": [
      {
        "name": "validateRotation",
        "purpose": "Validate complete rotation against all rules",
        "parameters": ["rotation: Rotation"],
        "returns": "ValidationResult"
      },
      {
        "name": "validateSet",
        "purpose": "Validate individual music set",
        "parameters": ["set: MusicSet", "position: number"],
        "returns": "SetValidationResult"
      },
      {
        "name": "explainViolation",
        "purpose": "Get detailed explanation of rule violation",
        "parameters": ["violation: Violation"],
        "returns": "ViolationExplanation"
      }
    ],

    "privateMethods": [
      {
        "name": "checkCategoryFrequency",
        "purpose": "Verify category count rules"
      },
      {
        "name": "checkCategoryPlacement",
        "purpose": "Verify placement rules"
      },
      {
        "name": "checkPatternCompliance",
        "purpose": "Verify pattern rules"
      },
      {
        "name": "buildViolationReport",
        "purpose": "Create detailed violation report"
      }
    ]
  },

  "testPlan": {
    "unitTests": [
      {
        "group": "Category Frequency",
        "tests": [
          "should require exactly 2 CE tracks",
          "should allow 1-2 G tracks but not 2 of both G and M",
          "should enforce specialty track requirements"
        ]
      },
      {
        "group": "Category Placement",
        "tests": [
          "should prevent consecutive date-based categories",
          "should require separator between same categories",
          "should prevent date-based after jingle",
          "should validate hour start categories"
        ]
      },
      {
        "group": "Pattern Compliance",
        "tests": [
          "should validate third set position requirements",
          "should enforce commercial break rules",
          "should validate pattern combinations"
        ]
      }
    ]
  },

  "errorHandling": {
    "strategy": "Collect all violations for comprehensive reporting",
    "errorTypes": {
      "ValidationError": {
        "properties": [
          "rule: string",
          "details: string",
          "location: string",
          "severity: 'error' | 'warning'",
          "suggestions: string[]"
        ]
      },
      "CategoryViolation": {
        "properties": [
          "category: CategoryCode",
          "violation: string",
          "position: string",
          "allowedOptions: CategoryCode[]"
        ]
      }
    }
  },

  "logging": {
    "levels": {
      "ERROR": [
        "Rule violations",
        "Invalid category placements",
        "Pattern violations"
      ],
      "WARN": [
        "Unusual but valid combinations",
        "Near-violation conditions"
      ],
      "INFO": [
        "Validation successes",
        "Rule application steps"
      ],
      "DEBUG": [
        "Individual rule checks",
        "Category counting details"
      ]
    }
  },

  "acceptanceCriteria": [
    {
      "scenario": "Core Category Counts",
      "given": "A rotation with category counts",
      "when": "Validating frequency rules",
      "then": "Should identify incorrect counts for CE, CM, CL"
    },
    {
      "scenario": "Category Placement",
      "given": "A rotation with category sequence",
      "when": "Validating placement rules",
      "then": "Should identify invalid placements and suggest corrections"
    },
    {
      "scenario": "Third Set Validation",
      "given": "A rotation's third set",
      "when": "Validating pattern compliance",
      "then": "Should verify position 5 and PB placement"
    },
    {
      "scenario": "Comprehensive Reporting",
      "given": "A rotation with multiple violations",
      "when": "Validating all rules",
      "then": "Should report all violations with clear explanations"
    }
  ]
}
